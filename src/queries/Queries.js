// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE

import * as Js_exn from "bs-platform/lib/es6/js_exn.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as ReasonApollo from "reason-apollo/src/ReasonApollo.bs.js";

var ppx_printed_query = "mutation addPost($title: String!, $content: String!, $sanitize: Boolean, $coverImg: String)  {\ninsert_posts(objects: {user_id: \"first-user-with-dummy-id\", title: $title, content: $content, sanitize: $sanitize, cover_img: $coverImg})  {\naffected_rows  \n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "insert_posts");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeObject(value$1);
        var tmp$1;
        if (match$3 !== undefined) {
          var match$4 = Js_dict.get(Caml_option.valFromOption(match$3), "affected_rows");
          var tmp$2;
          if (match$4 !== undefined) {
            var value$2 = Caml_option.valFromOption(match$4);
            var match$5 = Js_json.decodeNumber(value$2);
            tmp$2 = match$5 !== undefined ? match$5 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$2));
          } else {
            tmp$2 = Js_exn.raiseError("graphql_ppx: Field affected_rows on type posts_mutation_response is missing");
          }
          tmp$1 = {
            affected_rows: tmp$2
          };
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Object is not a value");
        }
        tmp = Caml_option.some(tmp$1);
      }
    } else {
      tmp = undefined;
    }
    return {
            insert_posts: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(title, content, sanitize, coverImg, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "title",
                  title
                ],
                /* tuple */[
                  "content",
                  content
                ],
                /* tuple */[
                  "sanitize",
                  sanitize !== undefined ? sanitize : null
                ],
                /* tuple */[
                  "coverImg",
                  coverImg !== undefined ? coverImg : null
                ]
              ]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var title = variables.title;
  var content = variables.content;
  var sanitize = variables.sanitize;
  var coverImg = variables.coverImg;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "title",
                  title
                ],
                /* tuple */[
                  "content",
                  content
                ],
                /* tuple */[
                  "sanitize",
                  sanitize !== undefined ? sanitize : null
                ],
                /* tuple */[
                  "coverImg",
                  coverImg !== undefined ? coverImg : null
                ]
              ]),
          parse: parse
        };
}

function ret_type(f) {
  return /* module */[];
}

var MT_Ret = /* module */[];

var PostMutation = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var AddPostMutation = ReasonApollo.CreateMutation([
      ppx_printed_query,
      parse
    ]);

var ppx_printed_query$1 = "query getPosts  {\nposts(order_by: {created_at: desc})  {\ntitle  \ncover_img  \ncontent  \ncreated_at  \nuser  {\nname  \navatar_url  \n}\n\n}\n\n}\n";

function parse$1(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "posts");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeArray(value$1);
      tmp = match$2 !== undefined ? match$2.map((function (value) {
                var match = Js_json.decodeObject(value);
                if (match !== undefined) {
                  var value$1 = Caml_option.valFromOption(match);
                  var match$1 = Js_dict.get(value$1, "title");
                  var field_title;
                  if (match$1 !== undefined) {
                    var value$2 = Caml_option.valFromOption(match$1);
                    var match$2 = Js_json.decodeString(value$2);
                    field_title = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                  } else {
                    field_title = Js_exn.raiseError("graphql_ppx: Field title on type posts is missing");
                  }
                  var match$3 = Js_dict.get(value$1, "cover_img");
                  var field_cover_img;
                  if (match$3 !== undefined) {
                    var value$3 = Caml_option.valFromOption(match$3);
                    var match$4 = Js_json.decodeNull(value$3);
                    if (match$4 !== undefined) {
                      field_cover_img = undefined;
                    } else {
                      var match$5 = Js_json.decodeString(value$3);
                      field_cover_img = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                    }
                  } else {
                    field_cover_img = undefined;
                  }
                  var match$6 = Js_dict.get(value$1, "content");
                  var field_content;
                  if (match$6 !== undefined) {
                    var value$4 = Caml_option.valFromOption(match$6);
                    var match$7 = Js_json.decodeString(value$4);
                    field_content = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                  } else {
                    field_content = Js_exn.raiseError("graphql_ppx: Field content on type posts is missing");
                  }
                  var match$8 = Js_dict.get(value$1, "created_at");
                  var field_created_at = match$8 !== undefined ? Caml_option.valFromOption(match$8) : Js_exn.raiseError("graphql_ppx: Field created_at on type posts is missing");
                  var match$9 = Js_dict.get(value$1, "user");
                  var field_user;
                  if (match$9 !== undefined) {
                    var value$5 = Caml_option.valFromOption(match$9);
                    var match$10 = Js_json.decodeObject(value$5);
                    if (match$10 !== undefined) {
                      var value$6 = Caml_option.valFromOption(match$10);
                      var match$11 = Js_dict.get(value$6, "name");
                      var field_name;
                      if (match$11 !== undefined) {
                        var value$7 = Caml_option.valFromOption(match$11);
                        var match$12 = Js_json.decodeString(value$7);
                        field_name = match$12 !== undefined ? match$12 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
                      } else {
                        field_name = Js_exn.raiseError("graphql_ppx: Field name on type users is missing");
                      }
                      var match$13 = Js_dict.get(value$6, "avatar_url");
                      var field_avatar_url;
                      if (match$13 !== undefined) {
                        var value$8 = Caml_option.valFromOption(match$13);
                        var match$14 = Js_json.decodeString(value$8);
                        field_avatar_url = match$14 !== undefined ? match$14 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$8));
                      } else {
                        field_avatar_url = Js_exn.raiseError("graphql_ppx: Field avatar_url on type users is missing");
                      }
                      field_user = /* record */[
                        /* name */field_name,
                        /* avatar_url */field_avatar_url
                      ];
                    } else {
                      field_user = Js_exn.raiseError("graphql_ppx: Expected object of type users, got " + JSON.stringify(value$5));
                    }
                  } else {
                    field_user = Js_exn.raiseError("graphql_ppx: Field user on type posts is missing");
                  }
                  return /* record */[
                          /* title */field_title,
                          /* cover_img */field_cover_img,
                          /* content */field_content,
                          /* created_at */field_created_at,
                          /* user */field_user
                        ];
                } else {
                  return Js_exn.raiseError("graphql_ppx: Expected object of type posts, got " + JSON.stringify(value));
                }
              })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$1));
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Field posts on type query_root is missing");
    }
    return {
            posts: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make$1(param) {
  return {
          query: ppx_printed_query$1,
          variables: null,
          parse: parse$1
        };
}

function makeWithVariables$1(param) {
  return {
          query: ppx_printed_query$1,
          variables: null,
          parse: parse$1
        };
}

function ret_type$1(f) {
  return /* module */[];
}

var MT_Ret$1 = /* module */[];

var PostsQuery = /* module */[
  /* ppx_printed_query */ppx_printed_query$1,
  /* query */ppx_printed_query$1,
  /* parse */parse$1,
  /* make */make$1,
  /* makeWithVariables */makeWithVariables$1,
  /* ret_type */ret_type$1,
  /* MT_Ret */MT_Ret$1
];

var GetPostsQuery = ReasonApollo.CreateQuery([
      ppx_printed_query$1,
      parse$1
    ]);

export {
  PostMutation ,
  AddPostMutation ,
  PostsQuery ,
  GetPostsQuery ,
  
}
/* AddPostMutation Not a pure module */
